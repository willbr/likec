mark functions as called and only include those in the output

;;;;

compose functions

odd:car '(1 2 3)

(odd (car '(1 2 3)))

;;;;

replace `for in list` with each

each (n int) (List 1 2 3 4)
    prn n

;;;;

use $ to escape lexp calls

puts
    $ "hello world"
=>
(puts "hello world")


puts
    "hello world"
=>
(puts ("hello world")

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

add SDL object

play with const

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

(in a b)

if a isn't a constant
eval a ONCE!

a_evaled = eval(a)

a_evaled == [b 0] || a_evaled [b 1]

;;;;

prn "{} == {}" 1 2

printf("%d == %d\n", 1, 2);

;;;;

perform a code review of this project

