copy clojurescript javascript method calls

= a (List)
.append a
:append a

or even?

a.append 5
a append 5

easier to type
having a dot makes it easier to know that a is an Object and not a
function

;;;;


use , to escape lexp calls

puts
    ,"hello world"

=>

(puts "hello world")

and not
(puts ("hello world")


;;;;

fix declare from moving rvalue of assignment to top with declare
new variables should initialise to defualt type values

;;;;


below is really templates

add macro map

def double (n int) int
    return (* n 2)

= a (List 1 2 3)
= b (map double a)

macro map (f (fn (any) any) old-list List) List
    = new-list (List)
    for (n (return-type f)) in old-list
        append (f n) to new-list
    return new-list

=>

def macro_map_1234 (f (fn (int) int) old-list List) List
    = new-list (List)
    for (n int) in old-list
        append (f n) to new-list
    return new-list

= a (List 1 2 3)
= b (macro_map_1234 double a)

=> or if it only has a single return value at the end

= a (List 1 2 3)
= macro__new-list1234 (List)
for (n int) in a
    append (double n) to macro__new-list1234
= b macro__new-list1234

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

add global variables

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

add SDL object

play with const

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

add Structs
not a pointer unlike objects
have one method; a constructor called new

struct Point
    x int
    y int

    def new (x int y int) Point
        @x = x
        @y = y
        return @


;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

add strings as an object

change main definition
    def main (args List) int
        return 0

