move escape hyphen into compilation

escape IDs for special characters
    eq? to eq_qm_

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

method calls
    change (a:length) to (a length)
    conflicts with a been a func pointer
    how useful is it?

add comments
    (comment dsahflkdasjf  jflksd jflksd jflak ajsd)
    ;; asfdjhs dhfkj hfjas hfajl hafhfdjak fhshj fhas


add Heredocs
    <<END
this is my comment
it can have multiple lines
END

in tokenize; check for here docs on NEWLINE match

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

allow heredocs to stack

def a (msg_a string msg_b string)
    puts msg_a
    puts msg_b

a <<A <<B
this is my first message
it can have multiple lines
<<A
this is another message
it also, can have multiple lines
<<B

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

change append to a macro rather than a method of List
    = a (new List)
    a:append 5

    append 5 to a

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

add macro map

def double (n int) int
    return (* n 2)

= a (List 1 2 3)
= b (map double a)

macro map (f (fn (any) any) old-list List) List
    = new-list (List)
    for (n (return-type f)) in old-list
        append (f n) to new-list
    return new-list

=>

def macro_map_1234 (f (fn (int) int) old-list List) List
    = new-list (List)
    for (n int) in old-list
        append (f n) to new-list
    return new-list

= a (List 1 2 3)
= b (macro_map_1234 double a)

=> or if it only has a single return value at the end

= a (List 1 2 3)
= macro__new-list1234 (List)
for (n int) in a
    append (double n) to macro__new-list1234
= b macro__new-list1234

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

add global variables

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

add SDL object

play with const

;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;
;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;; ;;;;;

add Structs
not a pointer unlike objects
have one method; a constructor called new

struct Point
    x int
    y int

    def new (x int y int) Point
        @x = x
        @y = y
        return @

